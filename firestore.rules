rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.admin == true;
    }

    // Products collection rules
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      
      // Only admins can create, update, or delete products
      allow create, update, delete: if isAdmin();
      
      // Validate product data on write
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'price', 'category', 'description', 'imageUrl', 'createdAt']) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.category is string &&
        request.resource.data.description is string &&
        request.resource.data.imageUrl is string &&
        request.resource.data.createdAt is string;
    }

    // Ratings collection rules
    match /ratings/{ratingId} {
      // Anyone can read ratings
      allow read: if true;
      
      // Anyone can create ratings with valid data
      allow create: if 
        // Required fields validation
        request.resource.data.keys().hasAll(['productId', 'rating', 'raterName', 'comment', 'createdAt']) &&
        
        // Rating validation
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5 &&
        
        // Name validation
        request.resource.data.raterName is string &&
        request.resource.data.raterName.size() >= 2 &&
        request.resource.data.raterName.size() <= 50 &&
        
        // Comment validation
        request.resource.data.comment is string &&
        request.resource.data.comment.size() >= 3 &&
        request.resource.data.comment.size() <= 500 &&
        
        // Product ID validation
        request.resource.data.productId is string &&
        exists(/databases/$(database)/documents/products/$(request.resource.data.productId)) &&
        
        // Timestamp validation
        request.resource.data.createdAt is timestamp;
      
      // Only admins can update/delete ratings
      allow update, delete: if isAdmin();
    }

    // Cart collection rules
    match /cart/{cartItemId} {
      // Anyone can read and write cart items
      allow read, write: if true;
    }

    // Admins collection rules
    match /admins/{userId} {
      // Only allow read if user is authenticated and is reading their own document
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only allow write if user is an existing admin
      allow write: if isAdmin();
    }

    // Orders collection rules
    match /orders/{orderId} {
      // Anyone can read orders
      allow read: if true;
      
      // Anyone can create orders with valid data
      allow create: if request.resource.data.keys().hasAll(['items', 'total', 'status', 'createdAt', 'customerName', 'seatNumber', 'orderNumber', 'paymentMethod']) &&
        request.resource.data.items is list &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.status in ['pending', 'paid', 'failed'] &&
        request.resource.data.customerName is string &&
        request.resource.data.customerName.size() > 0 &&
        request.resource.data.seatNumber is string &&
        request.resource.data.seatNumber.size() > 0 &&
        request.resource.data.orderNumber is string &&
        request.resource.data.orderNumber.size() > 0 &&
        request.resource.data.paymentMethod in ['cash', 'e-money'];
      
      // Only admins can update/delete orders
      allow update, delete: if isAdmin();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
