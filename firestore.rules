rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.admin == true;
    }

    // Products collection rules
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      
      // Only admins can create, update, or delete products
      allow create, update, delete: if isAdmin();
      
      // Validate product data on write
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'price', 'category', 'description', 'imageUrl', 'createdAt']) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.category is string &&
        request.resource.data.description is string &&
        request.resource.data.imageUrl is string &&
        request.resource.data.createdAt is string;
    }

    // Ratings collection rules
    match /ratings/{ratingId} {
      // Anyone can read ratings
      allow read: if true;
      
      // Only authenticated users can create ratings
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      
      // Users can only update their own ratings
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      
      // Users can only delete their own ratings
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Cart collection rules
    match /cart/{cartItemId} {
      // Users can only read their own cart items
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Users can create cart items for themselves
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update and delete their own cart items
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Admins collection rules
    match /admins/{userId} {
      // Only allow read if user is authenticated and is reading their own document
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only allow write if user is an existing admin
      allow write: if isAdmin();
    }

    // Orders collection rules (for future use)
    match /orders/{orderId} {
      // Users can read their own orders, admins can read all
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // Users can create orders, only admins can update/delete
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
